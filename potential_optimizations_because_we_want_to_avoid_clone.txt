POTENTIAL OPTIMIZATIONS (44 rn):


./rendering_engine/window.rs:14:    let renderer = Renderer::new(&window, sprites_json_to_load.clone()).await;
./rendering_engine/window.rs:26:                    let event = event.clone();
./rendering_engine/abstractions.rs:89:        let mut clone = self.clone();
./rendering_engine/abstractions.rs:101:        let mut clone = self.clone();
./rendering_engine/abstractions.rs:135:        let mut clone = self.clone();
./rendering_engine/abstractions.rs:147:        let mut clone = self.clone();
./rendering_engine/abstractions.rs:196:            sprites_to_load.push(sprite.path.clone());
./rendering_engine/abstractions.rs:197:            sprite_id_lookup.insert(sprite.name.clone(), sprites.len() - 1);
./rendering_engine/abstractions.rs:211:            sprites_to_load.push(sheet.path.clone());
./rendering_engine/abstractions.rs:216:                names.push(sprite.name.clone());
./tests/lib/headless_state.rs:22:        world.process_input(self.keys_down.clone(), camera);
./game_engine/game.rs:82:        self.world.process_input(self.input.keys_down.clone(), &mut self.camera);
./game_engine/game.rs:126:            self.on_key_down(string_key.clone());
./game_engine/world.rs:579:        let entity_position = self.entity_position_components.get(&entity_id).expect("All entities should have position components").borrow().clone();
./game_engine/world.rs:598:        let entities = self.entities_to_be_killed_at_end_of_frame.borrow().clone();
./game_engine/world.rs:615:        let melee_attack_reach = self.player_archetype_descriptor_lookup.get("test_melee_attack").expect("Could not find player attack archetype: test_melee_attack").clone();
./game_engine/inventory.rs:72:        self.item_containers.borrow_mut().insert(self.element_id, ItemContainer::new(container.container_type.clone()));
./game_engine/pathfinding.rs:65:    let start_node_clone = start_node.clone();
./game_engine/pathfinding.rs:66:    open_set.push(start_node.clone());
./game_engine/pathfinding.rs:81:                node = nodes[&parent].clone();
./game_engine/pathfinding.rs:123:                    nodes.insert([nx, ny], neighbor.clone());
./game_engine/pathfinding.rs:127:                nodes.insert([nx, ny], neighbor.clone());
./game_engine/pathfinding.rs:157:    let start_node_clone = start_node.clone();
./game_engine/pathfinding.rs:158:    open_set.push(start_node.clone());
./game_engine/pathfinding.rs:171:                node = nodes[&parent].clone();
./game_engine/pathfinding.rs:218:                    nodes.insert([nx, ny], neighbor.clone());
./game_engine/pathfinding.rs:222:                nodes.insert([nx, ny], neighbor.clone());
./game_engine/entities.rs:54:        let player: Player = self.player.borrow().clone();
./game_engine/entities.rs:57:            for entity_id in chunkref[*chunk].clone().entities_ids.iter() {
./game_engine/entities.rs:121:            let position_component = self.entity_position_components.get(entity_id).expect("Entities with tag: FollowsPlayer must have a PositionComponent").borrow().clone();
./game_engine/entities.rs:188:                let direction: EntityDirectionOptions = pathfinding::pathfind_by_block(position_component.clone(), *collision_component, *entity_id, self);
./game_engine/entities.rs:211:                let direction: EntityDirectionOptions = pathfinding::pathfind_high_granularity(position_component.clone(), *collision_component,*entity_id, self);
./game_engine/entities.rs:273:        self.set_entity_archetype(entity, archetype.clone());
./game_engine/entities.rs:280:            match tag.clone(){
./game_engine/loot.rs:48:                return self.entries[entry].item.clone()
./game_engine/camera.rs:39:        let player = world.player.borrow().clone();
./game_engine/camera.rs:48:                name_to_remove = name.clone();
./game_engine/camera.rs:56:        let element = UIElement::new(name.clone(), element_descriptor);
./game_engine/camera.rs:66:                elements.push(element.name.clone());
./game_engine/camera.rs:96:        let entity_position_component = world.entity_position_components.get(&entity_id).expect("All entities with sprites should have a position component").borrow().clone();
./game_engine/camera.rs:133:        let player = world.player.borrow().clone(); 
./game_engine/camera.rs:216:                    sprite = Some(world.sprites.get_sprite(sprite_id).expect(format!("Could not find projectile sprite {}", projectile_descriptor.sprite.as_str()).as_str()).clone());
./game_engine/camera.rs:224:                    sprite = Some(world.sprites.get_sprite(sprite_id).expect(format!("Could not find melee attack sprite {}", melee_descriptor.sprite.as_str()).as_str()).clone());
./game_engine/camera.rs:273:            sections.push(text.get_section(&self, screen_width, screen_height).clone());
